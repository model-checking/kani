   1|     | // Copyright Kani Contributors\
   2|     | // SPDX-License-Identifier: Apache-2.0 OR MIT\
   3|     | \
   4|     | //! Checks coverage results in an example with a `while` loop that returns before\
   5|     | //! running the last iteration.\
   6|     | \
   7|    2| fn find_first_negative(nums: &[i32]) -> Option<i32> {\
   8|    2|     let mut index = 0;\
   9|    2|     while index < nums.len() {\
  10|    2|         if nums[index] < 0 {\
  11|    2|             return Some(nums[index]);\
  12|    2|         }\
  13|    2|         index += 1;\
  14|     |     }\
  15|    0|     None\
  16|     | }\
  17|     | \
  18|     | #[kani::proof]\
  19|    2| fn main() {\
  20|    2|     let numbers = [1, 2, -3, 4, -5];\
  21|    2|     let result = find_first_negative(&numbers);\
  22|    2|     assert_eq!(result, Some(-3));\
  23|     | }\
