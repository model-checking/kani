enum core::option::Option<T> =
|  None()
|  Some(0: T)


fn test::add_opt(@1: @Adt0<i32>, @2: @Adt0<i32>) -> @Adt0<i32>
{
    let @0: @Adt0<i32>; // return
    let x@1: @Adt0<i32>; // arg #1
    let y@2: @Adt0<i32>; // arg #2
    let u@3: i32; // local
    let v@4: i32; // local
    let @5: i32; // anonymous local

    match x@1 {
        1 => {
            u@3 := copy ((x@1 as variant @1).0)
            match y@2 {
                1 => {
                    v@4 := copy ((y@2 as variant @1).0)
                    @5 := copy (u@3) + copy (v@4)
                    @0 := core::option::Option::Some { 0: move (@5) }
                    drop @5
                },
                0 => {
                    @0 := core::option::Option::None {  }
                },
            }
        },
        0 => {
            @0 := core::option::Option::None {  }
        },
    }
    return
}

fn test::main()
{
    let @0: (); // return
    let e@1: @Adt0<i32>; // local
    let @2: @Adt0<i32>; // anonymous local
    let @3: @Adt0<i32>; // anonymous local

    @2 := core::option::Option::Some { 0: const (1 : i32) }
    @3 := core::option::Option::Some { 0: const (2 : i32) }
    e@1 := @Fun0(move (@2), move (@3))
    drop @3
    drop @2
    drop e@1
    @0 := ()
    return
}
