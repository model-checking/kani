struct test::B =
{
  index: i32,
}

fn test::get_valB<'_0>(@1: &'_0 (@Adt0)) -> i32
{
    let @0: i32; // return
    let self@1: &'_ (@Adt0); // arg #1

    @0 := copy ((*(self@1)).index)
    return
}

struct test::A =
{
  val: i32,
}

fn test::get_valA<'_0>(@1: &'_0 (@Adt1)) -> i32
{
    let @0: i32; // return
    let self@1: &'_ (@Adt1); // arg #1

    @0 := copy ((*(self@1)).val)
    return
}

fn test::main()
{
    let @0: (); // return
    let e@1: @Adt1; // local
    let k@2: @Adt0; // local
    let i@3: i32; // local
    let @4: &'_ (@Adt1); // anonymous local
    let j@5: i32; // local
    let @6: &'_ (@Adt0); // anonymous local

    e@1 := @Adt1 { val: const (3 : i32) }
    k@2 := @Adt0 { index: const (3 : i32) }
    @4 := &e@1
    i@3 := @Fun2(move (@4))
    drop @4
    @6 := &k@2
    j@5 := @Fun0(move (@6))
    drop @6
    drop j@5
    drop i@3
    drop k@2
    drop e@1
    @0 := ()
    return
}
