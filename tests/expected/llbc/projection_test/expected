struct test::MyStruct =
{
  a: i32,
  b: i32,
}

enum test::MyEnum =
|  A(0: @Adt1, 1: i32)
|  B()


fn test::enum_match(@1: @Adt0) -> i32
{
    let @0: i32; // return
    let e@1: @Adt0; // arg #1
    let s@2: @Adt1; // local
    let i@3: i32; // local
    let @4: i32; // anonymous local

    match e@1 {
        0 => {
            s@2 := move ((e@1 as variant @0).0)
            i@3 := copy ((e@1 as variant @0).1)
            @4 := copy ((s@2).a)
            @0 := copy (@4) + copy (i@3)
            drop @4
            drop s@2
        },
        1 => {
            @0 := const (0 : i32)
        },
    }
    return
}

fn test::main()
{
    let @0: (); // return
    let s@1: @Adt1; // local
    let e@2: @Adt0; // local
    let i@3: i32; // local

    s@1 := @Adt1 { a: const (1 : i32), b: const (2 : i32) }
    e@2 := test::MyEnum::A { 0: move (s@1), 1: const (1 : i32) }
    i@3 := @Fun0(move (e@2))
    drop i@3
    @0 := ()
    return
}
