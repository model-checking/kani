rd_("EaThis creates an symbolic <em>valid</em> value of type <code>T</code>. You can \xe2\x80\xa6C`Get the shadow memory value of the given pointerCmThis module contains functions useful for checking unsafe \xe2\x80\xa6AnCreate a new PointerGenerator.ClCreate a new shadow memory instance initialized with the \xe2\x80\xa6AoThe pointer that was generated.C`Set the shadow memory value of the given pointermNull pointersAoReturns the argument unchanged.000000000000000BaCalls <code>U::from(self)</code>.000000000000000DiThis macro generates implementations of the <code>KaniIntoIter</code> \xe2\x80\xa6ChSpecify a function/method stub pair to use for proof \xe2\x80\xa6CmCreates a cover property with the specified condition and \xe2\x80\xa6CkThis module contains functions useful for float-related \xe2\x80\xa6AjMarks a Kani proof harnessCnSpawns a task on the current global executor (which is set \xe2\x80\xa6CgCreates an assertion of the specified condition and \xe2\x80\xa6CgCreates an assumption that will be valid after this \xe2\x80\xa6CiThis module contains an API for shadow memory. Shadow \xe2\x80\xa6CgSelect the SAT solver to use with CBMC for this harnessAoThe expected allocation status.CkSet Loop unwind limit for proof harnesses The attribute \xe2\x80\xa6CiGenerates an arbitrary vector whose length is at most \xe2\x80\xa6BeAdd a postcondition to this function.0ClThis module contains functions to work with futures (and \xe2\x80\xa6Ej<code>implies!(premise =&gt; conclusion)</code> means that if the <code>premise</code> \xe2\x80\xa6AaDangling pointersBgIn bounds pointer (it may be unaligned)CnA very simple executor: it polls the future in a busy loop \xe2\x80\xa6BfUsers should only need to invoke this.CjDeclaration of an explicit write-set for the annotated \xe2\x80\xa60BdAdd a precondition to this function.0DjAllow users to auto generate <code>Arbitrary</code> implementations by \xe2\x80\xa6DjAllow users to auto generate <code>Invariant</code> implementations by \xe2\x80\xa6CnThis trait should be used to specify and check type safety \xe2\x80\xa6CbA shadow memory data structure that contains a \xe2\x80\xa6EbThis creates a symbolic <em>valid</em> value of type <code>T</code>. The value \xe2\x80\xa6DfThis module introduces the <code>Arbitrary</code> trait as well as \xe2\x80\xa6ClCheck if the pointer is valid for write access according \xe2\x80\xa6BjKani implementation of function contracts.CnGenerates an arbitrary vector that is exactly EXACT_LENGTH \xe2\x80\xa6DjThis module introduces the <code>Invariant</code> trait as well as its \xe2\x80\xa6CnPicks the next task to be scheduled whenever the scheduler \xe2\x80\xa6CmSpecifies that a function contains recursion for contract \xe2\x80\xa6CjSuspends execution of the current future, to allow the \xe2\x80\xa6AfPointer to dead objectAjResult of spawning a task.ChKeeps cycling through the tasks in a deterministic orderCnThe pointer cannot be read / written to for the given type \xe2\x80\xa6DnCreates a symbolic value <em>bounded</em> by <code>N</code>. Bounded means \xe2\x80\xa6DkChecks that <code>ptr</code> points to an allocation that can hold data \xe2\x80\xa6CfSpecifies that a proof harness is expected to panic.**CjCreates a in-bounds raw pointer with non-deterministic \xe2\x80\xa6Dh<code>stub_verified(TARGET)</code> is a harness attribute (to be used on0CiWhether the pointer was generated with an initialized \xe2\x80\xa6BbAdd a loop invariant to this loop.DgThis macro implements <code>kani::Arbitrary</code> on a tuple whose \xe2\x80\xa6EcChecks that pointer <code>ptr</code> point to a valid value of type <code>T</code>.CmKani intrinsics contains the public APIs used by users to \xe2\x80\xa6CnCheck if two pointers points to the same allocated object, \xe2\x80\xa6CgEnumeration with the cases currently covered by the \xe2\x80\xa6CgHolds information about a pointer that is generated \xe2\x80\xa6DiAllow users to generate <code>BoundedArbitrary</code> implementations \xe2\x80\xa6ClPointer generator that can be used to generate arbitrary \xe2\x80\xa6ChCreates a raw pointer with non-deterministic properties.CgThis module introduces implementations for some std \xe2\x80\xa6DiCreate a pointer generator that fits at least <code>N</code> elements \xe2\x80\xa6ChTrait that determines the possible sequence of tasks \xe2\x80\xa6EhGiven an array <code>arr</code> of length <code>LENGTH</code>, this function returns \xe2\x80\xa6;CmDesignates this function as a harness to check a function \xe2\x80\xa60CkPolls the given future and the tasks it may spawn until \xe2\x80\xa6ClCheck if the pointer is valid for unaligned write access \xe2\x80\xa6CnCompute the size of the val pointed to if it is safe to do \xe2\x80\xa6DgIndicates to the scheduler whether it can <code>kani::assume</code> \xe2\x80\xa6BoCompute the size of the val pointed to if safe.CoNOP <code>concrete_playback</code> for type checking during \xe2\x80\xa6DjReturns whether the given float <code>value</code> satisfies the range \xe2\x80\xa6BjA mutable version of the previous function")