# Copyright Kani Contributors
# SPDX-License-Identifier: Apache-2.0 OR MIT
name: Release
on:
  push:
    tags:
      - kani-*

jobs:
  Release:
    name: Release
    runs-on: ubuntu-18.04
    permissions:
      contents: write
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version
        run: |
          # pkgid is something like file:///home/ubuntu/kani#kani-verifier:0.1.0
          echo "CRATE_VERSION=$(cargo pkgid | cut -d: -f3)" >> $GITHUB_ENV
          # GITHUB_REF is refs/tags/kani-0.1.0
          echo "TAG_VERSION=$(echo ${{ github.ref }} | cut -d "-" -f 2)" >> $GITHUB_ENV
          # Note that the above env vars get set for future steps, not this one
      - name: Version Check
        id: versioning
        run: |
          # Output for upload scripts to see
          echo ::set-output name=version::${{ env.TAG_VERSION }}
          # Validate git tag & Cargo.toml are in sync on version number
          if [[ ${{ env.CRATE_VERSION }} != ${{ env.TAG_VERSION }} ]]; then
            echo "Git tag ${{env.TAG_VERSION}} did not match crate version ${{env.CRATE_VERSION}}"
            exit 1
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: kani-${{ env.TAG_VERSION }}
          release_name: kani-${{ env.TAG_VERSION }}
          body: |
            Kani Rust verifier release bundle version ${{ env.TAG_VERSION }}.
          draft: true
          prerelease: false

  Upload:
    name: Upload
    needs: Release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-18.04]
        include:
          - os: macos-10.15
            target: x86_64-apple-darwin
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Kani Dependencies
        uses: ./.github/actions/setup
        with:
            os: ${{ matrix.os }}
      
      - name: Build release bundle
        run: |
          cargo run -p make-kani-release -- ${{ needs.Release.outputs.version }}

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: kani-${{ needs.Release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_name: kani-${{ needs.Release.outputs.version }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
