
running 1 test
test $DIR/display-output.rs - foo (line 9) ... ok

successes:

---- $DIR/display-output.rs - foo (line 9) stdout ----
warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/display-output.rs:13:12
   |
LL | fn foo(x: &std::fmt::Display) {}
   |            ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn std::fmt::Display`
   |
   = note: `#[warn(bare_trait_objects)]` on by default
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>

warning: unused variable: `x`
  --> $DIR/display-output.rs:11:5
   |
LL | let x = 12;
   |     ^ help: if this is intentional, prefix it with an underscore: `_x`
   |
note: the lint level is defined here
  --> $DIR/display-output.rs:9:9
   |
LL | #![warn(unused)]
   |         ^^^^^^
   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`

warning: unused variable: `x`
  --> $DIR/display-output.rs:13:8
   |
LL | fn foo(x: &std::fmt::Display) {}
   |        ^ help: if this is intentional, prefix it with an underscore: `_x`

warning: function is never used: `foo`
  --> $DIR/display-output.rs:13:4
   |
LL | fn foo(x: &std::fmt::Display) {}
   |    ^^^
   |
note: the lint level is defined here
  --> $DIR/display-output.rs:9:9
   |
LL | #![warn(unused)]
   |         ^^^^^^
   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`

warning: 4 warnings emitted



successes:
    $DIR/display-output.rs - foo (line 9)

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME

