- // MIR for `main` before SimplifyConstCondition-after-const-prop
+ // MIR for `main` after SimplifyConstCondition-after-const-prop
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_if.rs:5:11: 5:11
      let mut _1: bool;                    // in scope 0 at $DIR/simplify_if.rs:6:8: 6:13
      let _2: ();                          // in scope 0 at $DIR/simplify_if.rs:7:9: 7:15
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/simplify_if.rs:6:8: 6:13
          _1 = const false;                // scope 0 at $DIR/simplify_if.rs:6:8: 6:13
-         switchInt(const false) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/simplify_if.rs:6:8: 6:13
+         goto -> bb3;                     // scope 0 at $DIR/simplify_if.rs:6:8: 6:13
      }
  
      bb1: {
          StorageLive(_2);                 // scope 0 at $DIR/simplify_if.rs:7:9: 7:15
          _2 = noop() -> bb2;              // scope 0 at $DIR/simplify_if.rs:7:9: 7:15
                                           // mir::Constant
                                           // + span: $DIR/simplify_if.rs:7:9: 7:13
                                           // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }
      }
  
      bb2: {
          StorageDead(_2);                 // scope 0 at $DIR/simplify_if.rs:7:15: 7:16
          nop;                             // scope 0 at $DIR/simplify_if.rs:6:14: 8:6
          goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6
      }
  
      bb3: {
          nop;                             // scope 0 at $DIR/simplify_if.rs:8:6: 8:6
          goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:6:5: 8:6
      }
  
      bb4: {
          StorageDead(_1);                 // scope 0 at $DIR/simplify_if.rs:8:5: 8:6
          return;                          // scope 0 at $DIR/simplify_if.rs:9:2: 9:2
      }
  }
  
