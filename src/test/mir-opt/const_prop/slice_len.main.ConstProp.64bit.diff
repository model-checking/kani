- // MIR for `main` before ConstProp
+ // MIR for `main` after ConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:4:11: 4:11
      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:5:5: 5:33
      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:5:5: 5:30
      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19
      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:5:6: 5:19
      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:5:7: 5:19
      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:5:31: 5:32
      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33
      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33
      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19
      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:5:6: 5:19
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33
          StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:30
          StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19
          StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19
          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19
                                           // ty::Const
                                           // + ty: &[u32; 3]
                                           // + val: Unevaluated(main, [], Some(promoted[0]))
                                           // mir::Constant
                                           // + span: $DIR/slice_len.rs:5:6: 5:19
                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
          _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19
          _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19
          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19
          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:5:6: 5:19
          _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19
          StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19
          StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32
          _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32
          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33
          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:5:5: 5:33
-         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33
-         assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33
+         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33
+         assert(const true, "index out of bounds: the length is {} but the index is {}", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33
      }
  
      bb1: {
-         _1 = (*_2)[_6];                  // scope 0 at $DIR/slice_len.rs:5:5: 5:33
+         _1 = const 2_u32;                // scope 0 at $DIR/slice_len.rs:5:5: 5:33
          StorageDead(_6);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34
          StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34
          StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34
          StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:5:33: 5:34
          nop;                             // scope 0 at $DIR/slice_len.rs:4:11: 6:2
          return;                          // scope 0 at $DIR/slice_len.rs:6:2: 6:2
      }
  }
  
