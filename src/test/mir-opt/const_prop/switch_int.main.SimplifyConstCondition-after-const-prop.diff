- // MIR for `main` before SimplifyConstCondition-after-const-prop
+ // MIR for `main` after SimplifyConstCondition-after-const-prop
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:6:11: 6:11
      let mut _1: i32;                     // in scope 0 at $DIR/switch_int.rs:7:11: 7:12
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12
          _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12
-         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:7:5: 7:12
+         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:7:5: 7:12
      }
  
      bb1: {
          _0 = foo(const -1_i32) -> bb3;   // scope 0 at $DIR/switch_int.rs:9:14: 9:21
                                           // mir::Constant
                                           // + span: $DIR/switch_int.rs:9:14: 9:17
                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }
      }
  
      bb2: {
          _0 = foo(const 0_i32) -> bb3;    // scope 0 at $DIR/switch_int.rs:8:14: 8:20
                                           // mir::Constant
                                           // + span: $DIR/switch_int.rs:8:14: 8:17
                                           // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }
      }
  
      bb3: {
          StorageDead(_1);                 // scope 0 at $DIR/switch_int.rs:11:1: 11:2
          return;                          // scope 0 at $DIR/switch_int.rs:11:2: 11:2
      }
  }
  
