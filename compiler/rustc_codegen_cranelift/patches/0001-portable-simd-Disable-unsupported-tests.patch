From 97c473937382a5b5858d9cce3c947855d23b2dc5 Mon Sep 17 00:00:00 2001
From: bjorn3 <bjorn3@users.noreply.github.com>
Date: Thu, 18 Nov 2021 19:28:40 +0100
Subject: [PATCH] Disable unsupported tests

---
 crates/core_simd/src/math.rs         | 6 ++++++
 crates/core_simd/src/vector.rs       | 2 ++
 crates/core_simd/tests/masks.rs      | 2 ++
 crates/core_simd/tests/ops_macros.rs | 4 ++++
 4 files changed, 14 insertions(+)

diff --git a/crates/core_simd/src/math.rs b/crates/core_simd/src/math.rs
index 2bae414..2f87499 100644
--- a/crates/core_simd/src/math.rs
+++ b/crates/core_simd/src/math.rs
@@ -5,6 +5,7 @@ macro_rules! impl_uint_arith {
     ($($ty:ty),+) => {
         $( impl<const LANES: usize> Simd<$ty, LANES> where LaneCount<LANES>: SupportedLaneCount {
 
+            /*
             /// Lanewise saturating add.
             ///
             /// # Examples
@@ -43,6 +44,7 @@ macro_rules! impl_uint_arith {
             pub fn saturating_sub(self, second: Self) -> Self {
                 unsafe { simd_saturating_sub(self, second) }
             }
+            */
         })+
     }
 }
@@ -51,6 +53,7 @@ macro_rules! impl_int_arith {
     ($($ty:ty),+) => {
         $( impl<const LANES: usize> Simd<$ty, LANES> where LaneCount<LANES>: SupportedLaneCount {
 
+            /*
             /// Lanewise saturating add.
             ///
             /// # Examples
@@ -89,6 +92,7 @@ macro_rules! impl_int_arith {
             pub fn saturating_sub(self, second: Self) -> Self {
                 unsafe { simd_saturating_sub(self, second) }
             }
+            */
 
             /// Lanewise absolute value, implemented in Rust.
             /// Every lane becomes its absolute value.
@@ -109,6 +113,7 @@ macro_rules! impl_int_arith {
                 (self^m) - m
             }
 
+            /*
             /// Lanewise saturating absolute value, implemented in Rust.
             /// As abs(), except the MIN value becomes MAX instead of itself.
             ///
@@ -151,6 +156,7 @@ macro_rules! impl_int_arith {
             pub fn saturating_neg(self) -> Self {
                 Self::splat(0).saturating_sub(self)
             }
+            */
         })+
     }
 }
diff --git a/crates/core_simd/src/vector.rs b/crates/core_simd/src/vector.rs
index 7c5ec2b..c8631e8 100644
--- a/crates/core_simd/src/vector.rs
+++ b/crates/core_simd/src/vector.rs
@@ -75,6 +75,7 @@ where
         Self(array)
     }
 
+    /*
     /// Reads from potentially discontiguous indices in `slice` to construct a SIMD vector.
     /// If an index is out-of-bounds, the lane is instead selected from the `or` vector.
     ///
@@ -297,6 +298,7 @@ where
             // Cleared ☢️ *mut T Zone
         }
     }
+    */
 }
 
 impl<T, const LANES: usize> Copy for Simd<T, LANES>
diff --git a/crates/core_simd/tests/masks.rs b/crates/core_simd/tests/masks.rs
index 6a8ecd3..68fcb49 100644
--- a/crates/core_simd/tests/masks.rs
+++ b/crates/core_simd/tests/masks.rs
@@ -68,6 +68,7 @@ macro_rules! test_mask_api {
                 assert_eq!(core_simd::Mask::<$type, 8>::from_int(int), mask);
             }
 
+            /*
             #[cfg(feature = "generic_const_exprs")]
             #[test]
             fn roundtrip_bitmask_conversion() {
@@ -80,6 +81,7 @@ macro_rules! test_mask_api {
                 assert_eq!(bitmask, [0b01001001, 0b10000011]);
                 assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);
             }
+            */
         }
     }
 }
diff --git a/crates/core_simd/tests/ops_macros.rs b/crates/core_simd/tests/ops_macros.rs
index 31b7ee2..bd04b3c 100644
--- a/crates/core_simd/tests/ops_macros.rs
+++ b/crates/core_simd/tests/ops_macros.rs
@@ -567,6 +567,7 @@ macro_rules! impl_float_tests {
                     });
                 }
 
+                /*
                 fn horizontal_max<const LANES: usize>() {
                     test_helpers::test_1(&|x| {
                         let vmax = Vector::<LANES>::from_array(x).horizontal_max();
@@ -590,6 +591,7 @@ macro_rules! impl_float_tests {
                         Ok(())
                     });
                 }
+                */
             }
 
             #[cfg(feature = "std")]
@@ -604,6 +606,7 @@ macro_rules! impl_float_tests {
                         )
                     }
 
+                    /*
                     fn mul_add<const LANES: usize>() {
                         test_helpers::test_ternary_elementwise(
                             &Vector::<LANES>::mul_add,
@@ -611,6 +614,7 @@ macro_rules! impl_float_tests {
                             &|_, _, _| true,
                         )
                     }
+                    */
                 }
             }
         }
-- 
2.26.2.7.g19db9cfb68

