name: CI

on:
  - push
  - pull_request

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Install rustfmt
      run: |
        rustup component add rustfmt

    - name: Rustfmt
      run: |
        cargo fmt --check

  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          # cross-compile from Linux to Windows using mingw
          - os: ubuntu-latest
            env:
              TARGET_TRIPLE: x86_64-pc-windows-gnu
          - os: ubuntu-latest
            env:
              TARGET_TRIPLE: aarch64-unknown-linux-gnu

    steps:
    - uses: actions/checkout@v2

    - name: Cache cargo installed crates
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-installed-crates

    - name: Cache cargo registry and index
      uses: actions/cache@v2
      with:
        path: |
            ~/.cargo/registry
            ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo target dir
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}

    - name: Install MinGW toolchain and wine
      if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable
        rustup target add x86_64-pc-windows-gnu

    - name: Install AArch64 toolchain and qemu
      if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu qemu-user

    - name: Prepare dependencies
      run: |
        git config --global user.email "user@example.com"
        git config --global user.name "User"
        ./y.rs prepare

    - name: Build without unstable features
      env:
        TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}
      # This is the config rust-lang/rust uses for builds
      run: ./y.rs build --no-unstable-features

    - name: Build
      run: ./y.rs build --sysroot none

    - name: Test
      env:
        TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}
      run: |
        # Enable backtraces for easier debugging
        export RUST_BACKTRACE=1

        # Reduce amount of benchmark runs as they are slow
        export COMPILE_RUNS=2
        export RUN_RUNS=2

        # Enable extra checks
        export CG_CLIF_ENABLE_VERIFIER=1

        ./test.sh

    - name: Package prebuilt cg_clif
      run: tar cvfJ cg_clif.tar.xz build

    - name: Upload prebuilt cg_clif
      if: matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'
      uses: actions/upload-artifact@v2
      with:
        name: cg_clif-${{ runner.os }}
        path: cg_clif.tar.xz

    - name: Upload prebuilt cg_clif (cross compile)
      if: matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'
      uses: actions/upload-artifact@v2
      with:
        name: cg_clif-${{ runner.os }}-cross-x86_64-mingw
        path: cg_clif.tar.xz

  build_windows:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v2

    #- name: Cache cargo installed crates
    #  uses: actions/cache@v2
    #  with:
    #    path: ~/.cargo/bin
    #    key: ${{ runner.os }}-cargo-installed-crates

    #- name: Cache cargo registry and index
    #  uses: actions/cache@v2
    #  with:
    #    path: |
    #        ~/.cargo/registry
    #        ~/.cargo/git
    #    key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}

    #- name: Cache cargo target dir
    #  uses: actions/cache@v2
    #  with:
    #    path: target
    #    key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}

    - name: Prepare dependencies
      run: |
        git config --global user.email "user@example.com"
        git config --global user.name "User"
        git config --global core.autocrlf false
        rustup set default-host x86_64-pc-windows-gnu
        rustc y.rs -o y.exe -g
        ./y.exe prepare

    - name: Build
      #name: Test
      run: |
        # Enable backtraces for easier debugging
        #export RUST_BACKTRACE=1

        # Reduce amount of benchmark runs as they are slow
        #export COMPILE_RUNS=2
        #export RUN_RUNS=2

        # Enable extra checks
        #export CG_CLIF_ENABLE_VERIFIER=1

        ./y.exe build

    - name: Package prebuilt cg_clif
      # don't use compression as xzip isn't supported by tar on windows and bzip2 hangs
      run: tar cvf cg_clif.tar build

    - name: Upload prebuilt cg_clif
      uses: actions/upload-artifact@v2
      with:
        name: cg_clif-${{ runner.os }}
        path: cg_clif.tar
