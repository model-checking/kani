#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0 OR MIT

import argparse
import glob
import sys
import rmc
import rmc_flags
import os
import pathlib

MY_PATH = pathlib.Path(__file__).parent.parent.absolute()
RMC_C_LIB = MY_PATH / "library" / "rmc" / "rmc_lib.c"
EXIT_CODE_SUCCESS = 0
CBMC_VERIFICATION_FAILURE_EXIT_CODE = 10


def main():
    # Remove "rmc" from arg if invoked `cargo rmc ...`
    if len(sys.argv) >= 2 and sys.argv[1] == "rmc":
        del sys.argv[1]

    parser = argparse.ArgumentParser(prog="cargo rmc", description="Verify a Rust crate. For more information, see https://github.com/model-checking/rmc.")

    crate_group = parser.add_argument_group("Crate", "You can pass in the rust crate positionally or with the --crate flag.")
    crate_group.add_argument("crate", help="crate to verify", nargs="?")
    crate_group.add_argument("--crate", help="crate to verify", dest="crate_flag", metavar="CRATE")

    exclude_flags = []
    rmc_flags.add_flags(parser, {"default-target": "target"}, exclude_flags=exclude_flags)
    args = parser.parse_args()

    if args.crate:
        rmc.ensure(args.crate_flag is None, "Please provide a single crate to verify.")
    else:
        rmc.ensure(args.crate_flag is not None, "Please provide a crate to verify.")
        args.crate = args.crate_flag

    if args.quiet:
        args.verbose = False

    rmc.ensure_dependencies_in_path()

    # Add some CBMC flags by default unless `--no-default-checks` is being used
    if not args.no_default_checks:
        rmc.add_selected_default_cbmc_flags(args)

    rmc.cargo_build(args.crate, args.target_dir,
                    args.verbose, args.debug, args.mangler, args.dry_run, [])

    pattern = os.path.join(args.target_dir, "debug", "deps", "*.json")
    jsons = glob.glob(pattern)
    rmc.ensure(len(jsons) == 1, "Unexpected number of json outputs.")

    cbmc_filename = os.path.join(args.target_dir, "cbmc.out")
    c_filename = os.path.join(args.target_dir, "cbmc.c")
    symbols_filename = os.path.join(args.target_dir, "cbmc.symbols")
    if EXIT_CODE_SUCCESS != rmc.symbol_table_to_gotoc(jsons[0], cbmc_filename, args.verbose, args.keep_temps, args.dry_run):
        return 1

    args.c_lib.append(str(RMC_C_LIB))

    if EXIT_CODE_SUCCESS != rmc.link_c_lib(cbmc_filename, cbmc_filename, args.c_lib, args.verbose, args.quiet, args.function, args.dry_run):
        return 1

    if args.gen_c:
        if EXIT_CODE_SUCCESS != rmc.goto_to_c(cbmc_filename, c_filename, args.verbose, args.dry_run):
            return 1

    if args.gen_symbols:
        if EXIT_CODE_SUCCESS != rmc.goto_to_symbols(cbmc_filename, symbols_filename, args.verbose, args.dry_run):
            return 1

    if "--function" not in args.cbmc_args:
        args.cbmc_args.extend(["--function", args.function])

    if args.visualize:
        # Use a separate set of flags for coverage checking (empty for now)
        cover_args = []
        retcode = rmc.run_visualize(cbmc_filename, args.cbmc_args, cover_args, \
                                 args.verbose, args.quiet, args.keep_temps, \
                                 args.function, args.srcdir, args.wkdir, args.target_dir, args.dry_run)
    else:
        retcode = rmc.run_cbmc(cbmc_filename, args.cbmc_args, args.verbose, args.quiet, args.dry_run)

    if retcode == CBMC_VERIFICATION_FAILURE_EXIT_CODE and args.allow_cbmc_verification_failure:
        retcode = EXIT_CODE_SUCCESS

    return retcode


if __name__ == "__main__":
    sys.exit(main())
