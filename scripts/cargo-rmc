#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0 OR MIT

import argparse
import glob
import sys
import rmc


EXIT_CODE_SUCCESS = 0


def main():
    # Remove "rmc" from arg if invoked `cargo rmc ...`
    if len(sys.argv) >= 2 and sys.argv[1] == "rmc":
        del sys.argv[1]

    parser = argparse.ArgumentParser(description="Verify a Rust crate")
    parser.add_argument("--verbose", "-v", action="store_true")
    parser.add_argument("--quiet", "-q", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--keep-temps", action="store_true")
    parser.add_argument("--mangler", default="v0")
    parser.add_argument("crate", help="crate to verify")
    parser.add_argument("cbmc_args", nargs=argparse.REMAINDER,
                        default=[], help="Pass through directly to CBMC")
    args = parser.parse_args()
    if args.quiet:
        args.verbose = False

    if not rmc.dependencies_in_path():
        return 1

    rmc.cargo_build(args.crate, args.verbose, args.debug, args.mangler)

    pattern = f"target/debug/deps/*.json"
    jsons = glob.glob(pattern)
    if len(jsons) != 1:
        print("ERROR: unexpected number of json outputs")
        return 1
    cbmc_filename = "cbmc.out"
    if EXIT_CODE_SUCCESS != rmc.symbol_table_to_gotoc(jsons[0], cbmc_filename, args.verbose, args.keep_temps):
        return 1

    return rmc.run_cbmc(cbmc_filename, args.cbmc_args, args.verbose, args.quiet)


if __name__ == "__main__":
    sys.exit(main())
