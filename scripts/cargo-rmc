#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0 OR MIT

import argparse
import glob
import sys
import rmc
import os


EXIT_CODE_SUCCESS = 0


def main():
    # Remove "rmc" from arg if invoked `cargo rmc ...`
    if len(sys.argv) >= 2 and sys.argv[1] == "rmc":
        del sys.argv[1]

    parser = argparse.ArgumentParser(description="Verify a Rust crate")
    parser.add_argument("--verbose", "-v", action="store_true")
    parser.add_argument("--quiet", "-q", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--keep-temps", action="store_true")
    parser.add_argument("--gen-c", action="store_true")
    parser.add_argument("--mangler", default="v0")
    parser.add_argument("--visualize", action="store_true")
    parser.add_argument("--srcdir", default=".")
    parser.add_argument("--target-dir", default="target",
                        help="Directory for all generated artifacts")
    parser.add_argument("--wkdir", default=".")
    parser.add_argument("--function", default="main")
    parser.add_argument("crate", help="crate to verify")
    parser.add_argument("cbmc_args", nargs=argparse.REMAINDER,
                        default=[], help="Pass through directly to CBMC")
    args = parser.parse_args()

    if args.quiet:
        args.verbose = False

    if not rmc.dependencies_in_path():
        return 1

    rmc.cargo_build(args.crate, args.target_dir,
                    args.verbose, args.debug, args.mangler)

    pattern = os.path.join(args.target_dir, "debug", "deps", "*.json")
    jsons = glob.glob(pattern)
    if len(jsons) != 1:
        print("ERROR: unexpected number of json outputs")
        return 1
    cbmc_filename = os.path.join(args.target_dir, "cbmc.out")
    c_filename = os.path.join(args.target_dir, "cbmc.c")
    if EXIT_CODE_SUCCESS != rmc.symbol_table_to_gotoc(jsons[0], cbmc_filename, args.verbose, args.keep_temps):
        return 1

    if args.gen_c:
        if EXIT_CODE_SUCCESS != rmc.goto_to_c(cbmc_filename, c_filename, args.verbose):
            return 1

    if "--function" not in args.cbmc_args:
        args.cbmc_args.extend(["--function", args.function])

    if args.visualize:
        return rmc.run_visualize(cbmc_filename, args.cbmc_args, \
                                 args.verbose, args.quiet, args.keep_temps, \
                                 args.function, args.srcdir, args.wkdir, args.target_dir)
    else:
        return rmc.run_cbmc(cbmc_filename, args.cbmc_args, args.verbose, args.quiet)


if __name__ == "__main__":
    sys.exit(main())
