#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0 OR MIT

import argparse
import glob
import sys
import kani
import kani_flags
import os
import pathlib
import platform
import toml

MY_PATH = pathlib.Path(__file__).parent.parent.absolute()
KANI_C_LIB = MY_PATH / "library" / "kani" / "kani_lib.c"
EXIT_CODE_SUCCESS = 0
CBMC_VERIFICATION_FAILURE_EXIT_CODE = 10


def main():
    args = parse_args()

    kani.ensure_dependencies_in_path()

    if args.gen_c_runnable:
        kani.cargo_build(args.crate, args.target_dir, args, ["gen-c"])

        if args.only_codegen:
            return 0

        pattern = os.path.join(args.target_dir, "debug", "deps", "*.symtab.json")
        symbol_table_jsons = glob.glob(pattern)
        kani.ensure(len(symbol_table_jsons) > 0, f"Unexpected number of json outputs: {len(symbol_table_jsons)}")

        cbmc_runnable_filename = os.path.join(args.target_dir, "cbmc_runnable.out")
        c_runnable_filename = os.path.join(args.target_dir, "cbmc_runnable.c")
        restrictions_runnable_filename = os.path.join(
            args.target_dir, "debug", "deps") if args.restrict_vtable else None

        out_files = kani.symbol_table_to_gotoc(symbol_table_jsons, args.verbose, args.keep_temps, args.dry_run)

        kani.link_c_lib(out_files, cbmc_runnable_filename, args.c_lib, args.verbose, args.quiet, args.function,
                        args.dry_run, args.keep_temps)

        if EXIT_CODE_SUCCESS != kani.goto_to_c(
                cbmc_runnable_filename,
                c_runnable_filename,
                restrictions_runnable_filename,
                args.verbose,
                args.dry_run):
            return 1

        kani.gen_c_postprocess(c_runnable_filename, args.dry_run)

    kani.cargo_build(args.crate, args.target_dir, args)

    if args.only_codegen:
        return 0

    if args.build_target:
        pattern = os.path.join(args.target_dir, args.build_target, "debug", "deps", "*.symtab.json")
    else:
        pattern = os.path.join(args.target_dir, "debug", "deps", "*.symtab.json")
    symbol_table_jsons = glob.glob(pattern)

    if not args.dry_run:
        kani.ensure(len(symbol_table_jsons) > 0, f"Unexpected number of json outputs: {len(symbol_table_jsons)}")
    else:
        # Add a dummy value so dry-run works.
        symbol_table_jsons = ["dry-run.symtab.json"]

    cbmc_filename = os.path.join(args.target_dir, "cbmc.out")
    c_filename = os.path.join(args.target_dir, "cbmc.c")
    symbols_filename = os.path.join(args.target_dir, "cbmc.symbols")
    out_files = kani.symbol_table_to_gotoc(symbol_table_jsons, args.verbose, args.keep_temps, args.dry_run)

    restrictions_filename = os.path.join(args.target_dir, "debug", "deps") if args.restrict_vtable else None

    args.c_lib.append(str(KANI_C_LIB))

    kani.link_c_lib(
        out_files,
        cbmc_filename,
        args.c_lib,
        args.verbose,
        args.quiet,
        args.function,
        args.dry_run,
        args.keep_temps)

    if args.gen_c:
        if EXIT_CODE_SUCCESS != kani.goto_to_c(
                cbmc_filename,
                c_filename,
                restrictions_filename,
                args.verbose,
                args.dry_run):
            return 1

    if args.gen_symbols:
        if EXIT_CODE_SUCCESS != kani.goto_to_symbols(cbmc_filename, symbols_filename, args.verbose, args.dry_run):
            return 1

    if args.undefined_function_checks:
        # https://github.com/diffblue/cbmc/issues/6393
        if EXIT_CODE_SUCCESS != kani.run_goto_instrument(
                cbmc_filename, cbmc_filename,
                ['--add-library'],
                args.verbose, dry_run=args.dry_run, restrictions_filename=restrictions_filename):
            return 1
        if EXIT_CODE_SUCCESS != kani.run_goto_instrument(
                cbmc_filename, cbmc_filename,
                ['--generate-function-body-options', 'assert-false', '--generate-function-body', '.*', '--drop-unused-functions'],
                args.verbose, dry_run=args.dry_run, restrictions_filename=restrictions_filename):
            return 1
    else:
        # Apply --drop-unused-functions if undefined-function-checks was turned off
        if EXIT_CODE_SUCCESS != kani.run_goto_instrument(
                cbmc_filename, cbmc_filename,
                ['--drop-unused-functions'],
                args.verbose, dry_run=args.dry_run):
            return 1

    if "--function" not in args.cbmc_args:
        args.cbmc_args.extend(["--function", args.function])

    if args.visualize:
        # Use a separate set of flags for coverage checking (empty for now)
        cover_args = []
        retcode = kani.run_visualize(cbmc_filename, args.cbmc_args, cover_args,
                                     args.verbose, args.quiet, args.keep_temps,
                                     args.function, args.srcdir, args.wkdir, args.target_dir, args.dry_run)
    else:
        retcode = kani.run_cbmc(cbmc_filename, args.cbmc_args, args.verbose, args.quiet, args.dry_run)

    if retcode == CBMC_VERIFICATION_FAILURE_EXIT_CODE and args.allow_cbmc_verification_failure:
        retcode = EXIT_CODE_SUCCESS

    return retcode


def default_build_target():
    """
    Returns the default build target based on the current OS.

    This function will return None for windows and print a warning.
    """
    machine = platform.uname()
    if machine.system == "Linux":
        return"x86_64-unknown-linux-gnu"

    if machine.system == "Darwin":
        return "x86_64-apple-darwin"

    print("WARNING: No default build target exists for this platform. Please use --build-target to set the correct target")
    return None


def parse_args():
    # Create parser
    def create_parser():
        parser = argparse.ArgumentParser(
            prog="cargo kani",
            description="Verify a Rust crate. For more information, see https://github.com/model-checking/rmc.")

        crate_group = parser.add_argument_group(
            "Crate", "You can pass in the rust crate positionally or with the --crate flag.")
        crate_group.add_argument("crate", help="crate to verify", nargs="?")
        crate_group.add_argument("--crate", help="crate to verify", dest="crate_flag", metavar="CRATE")

        config_group = parser.add_argument_group("Config", "You can configure cargo kani with your Cargo.toml file.")
        config_group.add_argument("--config-toml",
                                  help="Where to read configuration from; defaults to crate's Cargo.toml")
        config_group.add_argument("--no-config-toml", action="store_true", help="Do not use any configuration toml")
        config_group.add_argument("--build-target", help="Build for the target triple.",
                                  default=default_build_target())
        config_group.add_argument("--only-codegen", action="store_true", help="Kani will only compile the crate.")

        exclude_flags = []
        kani_flags.add_flags(parser, {"default-target": "target"}, exclude_flags=exclude_flags)

        return parser

    # Determine what crate to analyze from flags
    def get_crate_from_args(args):
        validate(args)
        return args.crate or args.crate_flag or "."

    # Combine the command line parameter to get a config file;
    # return None if no_config_toml is set
    def get_config_toml(no_config_toml, config_toml, args):
        crate = get_crate_from_args(args)
        if no_config_toml:
            return None
        elif config_toml is not None:
            # If config_toml is explicitly given, ensure it exists
            kani.ensure(pathlib.Path(config_toml).is_file(), f"Invalid path to config file: {config_toml}")
            return config_toml
        else:
            # If no config flags are set, look for config toml in default location (<crate>/Cargo.toml)
            cargo_toml = pathlib.Path(crate).joinpath("Cargo.toml")
            kani.ensure(cargo_toml.is_file(), f"Cannot find configuration toml at expected location: {cargo_toml}")
            return cargo_toml

    # Combine args set by config toml and provided on command line
    def get_combined_args(parser, config_toml):
        # Extract flags from config_toml
        toml_flags = extract_flags_from_toml(config_toml)

        # Load args from toml flags
        combined_args = argparse.Namespace()
        parser.parse_args(toml_flags, namespace=combined_args)

        # Set relative paths to be rooted at config toml's directory rather than cwd
        def fix_paths(value):
            if isinstance(value, list):
                return list(map(fix_paths, value))
            elif isinstance(value, pathlib.PurePath):
                return pathlib.Path(config_toml).parent.joinpath(value)
            else:
                return value

        ca_dict = combined_args.__dict__
        for key in ca_dict:
            ca_dict[key] = fix_paths(ca_dict[key])

        # Load args from command line using toml args as default
        parser.parse_args(sys.argv[1:], namespace=combined_args)

        return combined_args

    # Check for conflicting flags
    def validate(args):
        kani.ensure(not (args.crate and args.crate_flag), "Please provide a single crate to verify.")
        kani.ensure(not (args.no_config_toml and args.config_toml),
                    "Incompatible flags: --config-toml, --no-config-toml")

    # Fix up args before returning
    def post_process(args):
        # Combine positional and flag argument for input
        args.crate = get_crate_from_args(args)

        # --quiet overrides --verbose
        if args.quiet:
            args.verbose = False

        # Add some CBMC flags by default unless `--no-default-checks` is being used
        if args.default_checks:
            kani.add_selected_default_cbmc_checks(args)

        # Conditionally add common CBMC flags
        kani.process_common_cbmc_flags(args)

    # Remove "kani" from arg if invoked `cargo kani ...`
    if len(sys.argv) >= 2 and sys.argv[1] == "kani":
        del sys.argv[1]

    # Parse command line args to find crate and check for config flags
    parser = create_parser()
    cl_args = parser.parse_args()
    validate(cl_args)

    # Try to find the config_toml based on command line arguments
    config_toml = get_config_toml(cl_args.no_config_toml, cl_args.config_toml, cl_args)

    if config_toml is not None:
        # If config_toml is found, combine configuration with command line arguments
        combined_args = get_combined_args(parser, config_toml)
        validate(combined_args)
        post_process(combined_args)
        return combined_args
    else:
        # If config_toml is missing, just use the parsed command line arguments
        post_process(cl_args)
        return cl_args


def extract_flags_from_toml(path):
    """Extract a list of args based on given config toml
       Kani can be configured in the following tables:
         - kani
         - workspace.metadata.kani
         - package.metadata.kani
       The only field supported today is flags.
    """
    # Load the flag data from toml
    data = toml.load(path)

    # Extract the kani flags from the toml, if any of the supported tables are present
    kani_data = dict()
    tables = ["workspace.metadata.kani", "package.metadata.kani", "kani"]
    for table_name in tables:
        table = data
        for section in table_name.split("."):
            table = table.get(section, dict())
        kani_data.update(table)

    if "flags" not in kani_data:
        return []

    flag_data = kani_data["flags"]

    # Extract nested flags
    flags = dict()

    def find_flags(args):
        for key in args:
            if isinstance(args[key], dict):
                find_flags(args[key])
            else:
                flags[key] = args[key]
    find_flags(flag_data)

    # Add config toml flags to flag list
    success = True
    flag_list = []

    def add_flag(flag, value):
        if isinstance(value, bool):
            if value:
                flag_list.append(f"--{flag}")
            else:
                if flag.startswith("no-"):
                    flag_list.append(f"--{flag[3:]}")
                else:
                    flag_list.append(f"--no-{flag}")
        elif isinstance(value, list):
            flag_list.append(f"--{flag}")
            assert all(map(lambda arg: isinstance(arg, str), value)), f"ERROR: Invalid config: {flag} = {value}"
            flag_list.extend(value)
        elif isinstance(value, str):
            flag_list.append(f"--{flag}")
            flag_list.append(value)
        else:
            print(f"ERROR: Invalid config: {flag} = {value}")
            success = False
    for flag in flags:
        add_flag(flag, flags[flag])

    kani.ensure(success)
    return flag_list


if __name__ == "__main__":
    sys.exit(main())
