#!/usr/bin/env bash
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0 OR MIT


# Usage:
# RMCFLAGS="[<RMC_OPTIONS>]*" rmc-rustc --rmc-flags [<RUSTC_OPTIONS>]*
#   - This will run rmc-compiler with RMC options provided via RMCFLAGS
#     environment variable + the given RUSTC_OPTIONS.
# rmc-rustc [<RMC_OPTIONS>]* [<RUSTC_OPTIONS>]*
#   - This will run rmc-compiler with RMC options + the given RUSTC_OPTIONS
set -eu

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
REPO_DIR="$(dirname $SCRIPT_DIR)"

RMC_PATH=${RMC_PATH:-""}

shopt -s nullglob
set_paths() {
    # TODO: We should build into a specific folder.
    local RMC_CANDIDATES=("$REPO_DIR"/target/*/rmc-compiler)

    if [ -z "${RMC_PATH}" ]
    then
        if [[ -z ${RMC_CANDIDATES:-""} ]] || [[ ${#RMC_CANDIDATES[@]} -ne 1 ]]
        then
            echo "ERROR: Could not find RMC binary."
            echo "Looked for: '$REPO_DIR/target/*/rmc-compiler'"
            echo "Was RMC successfully built first?"
            exit 1
        fi
        RMC_PATH=${RMC_CANDIDATES[0]}
    fi
}

set_paths

# Hack to enable cargo rmc
#
# The rmc-compiler requires the flags related to the rmc libraries to be
# in front of the ones that control rustc.
#
# For cargo rmc, cargo sometimes adds flags before the custom RUSTFLAGS, hence,
# we use a special environment variable to set RMC specific flags. These flags
# should only be enabled if --rmc-flags is present.
args="${*#--rmc-flags}"
if [ "$args" != "$*" ]
then
    FLAGS=("${RMCFLAGS} $args")
else
    FLAGS=("$args")
fi

"${RMC_PATH}" ${FLAGS}
