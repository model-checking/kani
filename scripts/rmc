#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0 OR MIT

import argparse
import os
import sys
import rmc
import rmc_flags
import pathlib

MY_PATH = pathlib.Path(__file__).parent.parent.absolute()
RMC_C_LIB = MY_PATH / "library" / "rmc" / "rmc_lib.c"
EXIT_CODE_SUCCESS = 0
CBMC_VERIFICATION_FAILURE_EXIT_CODE = 10


def main():
    parser = argparse.ArgumentParser(description="Verify a single Rust file. For more information, see https://github.com/model-checking/rmc.")

    input_group = parser.add_argument_group("Input", "You can pass in the rust file positionally or with the --input flag.")
    input_group.add_argument("input", help="Rust file to verify", nargs="?")
    input_group.add_argument("--input", help="Rust file to verify", dest="input_flag", metavar="INPUT")

    exclude_flags = [
        # In the future we hope to make this configurable in the command line.
        # For now, however, changing this from "main" breaks rmc.
        # Issue: https://github.com/model-checking/rmc/issues/169
        "--function"
    ]
    rmc_flags.add_flags(parser, {"default-target": "."}, exclude_flags=exclude_flags)
    args = parser.parse_args()
    args.function = "main"

    if args.input:
        rmc.ensure(args.input_flag is None, "Please provide a single file to verify.")
    else:
        rmc.ensure(args.input_flag is not None, "Please provide a file to verify.")
        args.input = args.input_flag
    
    if args.quiet:
        args.verbose = False

    rmc.ensure_dependencies_in_path()
    
    # Add some CBMC flags by default unless `--no-default-checks` is being used
    if not args.no_default_checks:
        rmc.add_selected_default_cbmc_flags(args)

    base, ext = os.path.splitext(args.input)
    rmc.ensure(ext == ".rs", "Expecting .rs input file.")

    json_filename = base + ".json"
    goto_filename = base + ".goto"
    c_filename = base + ".c"
    symbols_filename = base + ".symbols"

    if EXIT_CODE_SUCCESS != rmc.compile_single_rust_file(args.input, json_filename, args.verbose, args.debug, args.keep_temps, args.mangler, args.dry_run, []):
        return 1

    if EXIT_CODE_SUCCESS != rmc.symbol_table_to_gotoc(json_filename, goto_filename, args.verbose, args.keep_temps, args.dry_run):
        return 1

    args.c_lib.append(str(RMC_C_LIB))

    if EXIT_CODE_SUCCESS != rmc.link_c_lib(goto_filename, goto_filename, args.c_lib, args.verbose, args.quiet, args.function, args.dry_run):
        return 1

    if args.gen_c:
        if EXIT_CODE_SUCCESS != rmc.goto_to_c(goto_filename, c_filename, args.verbose, args.dry_run):
            return 1

    if args.gen_symbols:
        if EXIT_CODE_SUCCESS != rmc.goto_to_symbols(goto_filename, symbols_filename, args.verbose, args.dry_run):
            return 1

    if "--function" not in args.cbmc_args:
        args.cbmc_args.extend(["--function", args.function])
    
    if args.visualize:
        # Use a separate set of flags for coverage checking (empty for now)
        cover_args = []
        retcode = rmc.run_visualize(goto_filename, args.cbmc_args, cover_args, \
                                    args.verbose, args.quiet, args.keep_temps, \
                                    args.function, args.srcdir, args.wkdir, args.target_dir, args.dry_run)
    else:
        retcode = rmc.run_cbmc(goto_filename, args.cbmc_args, args.verbose, args.quiet, args.dry_run)
    if retcode == CBMC_VERIFICATION_FAILURE_EXIT_CODE and args.allow_cbmc_verification_failure:
        retcode = EXIT_CODE_SUCCESS
    return retcode


if __name__ == "__main__":
    sys.exit(main())
